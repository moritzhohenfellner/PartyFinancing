{
    "contents" : "\n# Prepare Data ------------------------------------------------------------\n#Load\nrecord <- read.csv(file=\"mruns.csv\",sep=\",\",head=TRUE)\n\n#Look only at final TS\nfinalStep = subset(record, record$ts==max(record$ts))\n\n\n#Aggregate Runs with similar Input\nfinalStep$combinationIdentifier = finalStep$theta*100000+finalStep$p*1000+finalStep$pMedia*10\nfinalStep$Win =  ifelse(finalStep$posOpinionShare>0.5,1,0)\n\naggregated = ddply(finalStep,~combinationIdentifier,summarise,pEnd=mean(posOpinionShare),sdPEnd=sd(posOpinionShare), p=mean(p), s=mean(pMedia), t=mean(theta), n=length(theta), pWin = mean(Win))\naggregated$Win = ifelse(aggregated$pEnd>0.5,1,0)\n\n\n\n\n# Mean Outcome P0 vs T -----------------------------------------------------\n#Means\nggplot(aggregated, aes(x=t, y=p))+\n  geom_tile(aes(fill=pEnd))+\n  #scale_fill_gradientn(name=\"Share of Proponents \\nin Final Time Step\\n \",colours=brewer.pal(9,\"RdYlGn\"))+\n  scale_fill_gradientn(name=expression(p[final]) ,colours=brewer.pal(9,\"RdYlGn\"))+\n  beamerPlot+\n  xlab(expression(tau))+\n  #ylab(paste(expression(p[0]), \"Initial Share of Proponents\"))\n  ylab(expression(p[0]))\n#  geom_abline(slope=1, intercept= 0)+\n#  geom_abline(slope=-1, intercept= 1)+\n#  geom_abline(intercept = 0.7, slope = 0)\nggsave(file=\"MeanOtucomePvsT.pdf\", width=16, height=10, dpi=100)\n\n\n\n# Mean Outcome P0 vs S -----------------------------------------------------\n#Means\nggplot(aggregated, aes(x=p, y=s))+\n  geom_tile(aes(fill=pEnd))+\n  scale_fill_gradientn(name=expression(p[final]) ,colours=brewer.pal(9,\"RdYlGn\"))+\n  beamerPlot+\n  xlab(expression(p[0]))+\n  ylab(expression(p[M]))\nggsave(file=\"MeanOtucomePvsS.pdf\", width=16, height=10, dpi=100)\n\n\n\n# Chance To Win P0 vs S ---------------------------------------------------\nggplot(aggregated, aes(x=p, y=s))+\n  geom_tile(aes(fill=pWin))+\n  scale_fill_gradientn(name=\"Share of \\nRuns Won\\nby Proponents\\n\" ,colours=brewer.pal(9,\"RdYlGn\"))+\n  beamerPlot+\n  xlab(expression(p[0]))+\n  ylab(expression(p[M]))\nggsave(file=\"PWinPvsS.pdf\", width=16, height=10, dpi=100)\n\n\n\n\n# Win Loose P0 vs S -------------------------------------------------------\nggplot(aggregated, aes(x=p, y=s))+\n  geom_tile(aes(fill=as.factor(Win)))+\n  #scale_fill_discrete(name=expression(p[final]))+\n  scale_fill_manual(name=\"Proponents:\", values=c(\"0\"=\"red\", \"1\"=\"darkgreen\"), labels=c(\"0\"=\"Loose\", \"1\"=\"Win\"))+\n  beamerPlot+\n  xlab(expression(p[0]))+\n  ylab(expression(p[M]))\nggsave(file=\"WinPvsS.pdf\", width=16, height=10, dpi=100)\n\n\n# n  p0 vs s ----------------------------------------------------\nggplot(aggregated, aes(x=p, y=s))+\n  geom_tile(aes(fill=n))+\n  scale_fill_continuous(name=expression(n))+\n  beamerPlot+\n  xlab(expression(p[0]))+\n  ylab(expression(p[M]))\nggsave(file=\"nPvsS.pdf\", width=16, height=10, dpi=100)\n\n\n# sd  p0 vs s ----------------------------------------------------\nggplot(aggregated, aes(x=p, y=s))+\n  geom_tile(aes(fill=sdPEnd))+\n  scale_fill_continuous(name=expression(sigma(p)[\"final\"]))+\n  beamerPlot+\n  xlab(expression(p[0]))+\n  ylab(expression(p[M]))\nggsave(file=\"sdPvsS.pdf\", width=16, height=10, dpi=100)\n\n\n# Standard Dev p vs t ----------------------------------------------------\nggplot(aggregated, aes(x=t, y=p))+\n  geom_tile(aes(fill=sdPEnd))+\n  scale_fill_continuous(name=expression(sigma(p)[\"final\"]))+\n  beamerPlot+\n  xlab(expression(tau))+\n  ylab(expression(p[M]))\nggsave(file=\"sdpvst.pdf\", width=16, height=10, dpi=100)\n\n\n\n\n\n\n\n\n# p(s) over time ----------------------------------------------------------\n#ggplot(record)+\n#  geom_line(aes(x=ts, y = posOpinionShare, group = runNumber, color=as.factor(pMedia)))\n\n\n\n\n\n",
    "created" : 1482062494371.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3393694554",
    "id" : "3ED55A6C",
    "lastKnownWriteTime" : 1481912924,
    "path" : "~/git/mss/MSS/R/generateStandardPlots.R",
    "project_path" : "generateStandardPlots.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}