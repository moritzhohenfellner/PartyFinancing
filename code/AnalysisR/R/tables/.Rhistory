beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
#ggsave(file="WinPvsS.pdf", width=16, height=10, dpi=100)
# Winner Plot -------------------------------------------------------------
Merged$pEnd=Merged$pWin
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pEnd)], p0=mean(p), pm=mean(s), MaxPEnd = max(pEnd), sd=sd(pEnd), diff=max(pEnd)-min(pEnd))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Succesfull:", values=c("SwingStupid"="red", "StupidStupid"="gray", "PromStupid"="darkgreen", "non"="black"),
labels=c("SwingStupid"="Swing", "StupidStupid"="Stupi", "PromStupid"="Prom", "non"="Even"))+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
#ggsave(file="WinPvsS.pdf", width=16, height=10, dpi=100)
# Winner Plot -------------------------------------------------------------
Merged$pEnd=Merged$pWin
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pEnd)], p0=mean(p), pm=mean(s), MaxPEnd = max(pEnd), sd=sd(pEnd), diff=max(pEnd)-min(pEnd))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Succesfull:", values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Swing", "StupidStupid"="Stupi", "PromStupid"="Prom", "non"="Even"))+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
#ggsave(file="WinPvsS.pdf", width=16, height=10, dpi=100)
# Winner Plot -------------------------------------------------------------
Merged$pEnd=Merged$pWin
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pEnd)], p0=mean(p), pm=mean(s), MaxPEnd = max(pEnd), sd=sd(pEnd), diff=max(pEnd)-min(pEnd))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Succesfull:", values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Swing", "StupidStupid"="Stupid", "PromStupid"="Prom", "non"="Even"))+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
#ggsave(file="WinPvsS.pdf", width=16, height=10, dpi=100)
# Winner Plot -------------------------------------------------------------
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pWin)], p0=mean(p), pm=mean(s), MaxpWin = max(pWin), sd=sd(pWin), diff=max(pWin)-min(pWin))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Succesfull:", values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Swing", "StupidStupid"="Stupid", "PromStupid"="Prom", "non"="Even"))+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
#ggsave(file="WinPvsS.pdf", width=16, height=10, dpi=100)
# Winner Plot -------------------------------------------------------------
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pWin)], p0=mean(p), pm=mean(s), MaxpWin = max(pWin), sd=sd(pWin), diff=max(pWin)-min(pWin))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Wins:", values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Swing", "StupidStupid"="Stupid", "PromStupid"="Prom", "non"="Even"))+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
ggsave(file="WinnerPlot.pdf", width=16, height=10, dpi=100)
# Winner Plot -------------------------------------------------------------
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pWin)], p0=mean(p), pm=mean(s), MaxpWin = max(pWin), sd=sd(pWin), diff=max(pWin)-min(pWin))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Victories:", values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Swing", "StupidStupid"="Stupid", "PromStupid"="Prom", "non"="Even"))+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
ggsave(file="WinnerPlot.pdf", width=16, height=10, dpi=100)
# Load Data ---------------------------------------------------------------
rm(list=ls(all=TRUE))
setwd("~/git/mss/MSS/R")
library("ggplot2")
library("plyr")
library("RColorBrewer")
library("xtable")
source("defineBeamerPlot.R")
#Stupid Stupid
setwd("~/git/mss/MSS/D150Out/smallStupidStuipd/1481908670856/")
source("~/git/mss/MSS/R/generateStandardPlots.R")
StupidStupid = aggregated
StupidStupid$Game="StupidStupid"
#Swing Stupid
setwd("~/git/mss/MSS/D150Out/smallSwingStupid/1481926279694/")
source("~/git/mss/MSS/R/generateStandardPlots.R")
SwingStupid = aggregated
SwingStupid$Game="SwingStupid"
#Prom Stupid
setwd("~/git/mss/MSS/D150Out/smallPromStupid/1481955685931/")
source("~/git/mss/MSS/R/generateStandardPlots.R")
PromStupid = aggregated
PromStupid$Game="PromStupid"
setwd("~/git/mss/MSS/R/tables/")
# Merge -------------------------------------------------------------------
Merged=rbind(StupidStupid, SwingStupid, PromStupid)
# Table -------------------------------------------------------------------
#Identifiers
tabelIdentA = 0.7*100000+0.45*1000+c(0.25,0.5,0.75)*10
tabelIdentB = 0.7*100000+0.5*1000+c(0.25,0.5,0.75)*10
allIdent = c(tabelIdentA, tabelIdentB)
TableData = subset(Merged, (Merged$combinationIdentifier%in%allIdent))
TabelRduced = TableData[,c()]
rawTable = ddply(TableData, ~combinationIdentifier, summarise, p0=mean(p), pm=mean(s))
TabelDataSort = TableData[(order(TableData$combinationIdentifier)),]
#Means
rawTable$MeanStupid=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanStupid = TabelDataSort[(TabelDataSort$Game=="StupidStupid"),]$pEnd
rawTable$MeanSwing=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanSwing = TabelDataSort[(TabelDataSort$Game=="SwingStupid"),]$pEnd
rawTable$MeanProm=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanProm = TabelDataSort[(TabelDataSort$Game=="PromStupid"),]$pEnd
#SD
rawTable$SDStupid=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDStupid = TabelDataSort[(TabelDataSort$Game=="StupidStupid"),]$sdPEnd
rawTable$SDSwing=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDSwing = TabelDataSort[(TabelDataSort$Game=="SwingStupid"),]$sdPEnd
rawTable$SDProm=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDProm = TabelDataSort[(TabelDataSort$Game=="PromStupid"),]$sdPEnd
hlines=c(-1,0,3,6)
MeanTable = xtable(rawTable[,c(2:9)], caption="Mean result for proponents. Oponents play stupid. \\rot{10 runs per cell}", digits = 2)
align(MeanTable) <- "|lll|ccc|ccc"
print.xtable(x=MeanTable, hline.after = hlines, include.rownames = FALSE, vlines.after=vlines, caption.placement = "top")#, file = "meanTable.txt")
# Winner Plot -------------------------------------------------------------
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pWin)], p0=mean(p), pm=mean(s), MaxpWin = max(pWin), sd=sd(pWin), diff=max(pWin)-min(pWin))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Victories:", values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Swing", "StupidStupid"="Stupid", "PromStupid"="Prom", "non"="Even"))+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
ggsave(file="WinnerPlot.pdf", width=16, height=10, dpi=100)
setwd("~/git/mss/MSS/DOut/")
source("~/git/mss/MSS/R/generateStandardPlots.R")
setwd("~/git/mss/MSS/DOut/smallStupidStuipd/1481908161863/")
source("~/git/mss/MSS/R/generateStandardPlots.R")
View(record)
unique(record$ts)
ggplot(record)+
geom_line(aes(x=ts, y = posOpinionShare, group = runNumber, color=as.factor(theta)))
ggplot(record)+
geom_line(aes(x=ts, y = posOpinionShare, group = runNumber, color=as.factor(theta)))
ggplot(record)+
geom_line(aes(x=ts, y = posOpinionShare, group = runNumber, color=as.factor(pMedia)))
ddply(record, ~runNumber, summarize)
ddply(record, ~runNumber, summarize, diff56=posOpinionShare[5]-posOpinionShare[5])
ddply(record, ~runNumber, summarize, diff56=posOpinionShare[1]-posOpinionShare[2])
hist(ddply(record, ~runNumber, summarize, diff56=posOpinionShare[1]-posOpinionShare[2]))
hist(ddply(record, ~runNumber, summarize, diff56=posOpinionShare[1]-posOpinionShare[2])$diff56)
hist(ddply(record, ~runNumber, summarize, diff56=posOpinionShare[4]-posOpinionShare[5])$diff56)
hist(ddply(record, ~runNumber, summarize, diff12=posOpinionShare[1]-posOpinionShare[2])$diff12)
hist(ddply(record, ~runNumber, summarize, diff56=posOpinionShare[5]-posOpinionShare[6])$diff56)
density(ddply(record, ~runNumber, summarize, diff12=posOpinionShare[1]-posOpinionShare[2])$diff12)
plot(density(ddply(record, ~runNumber, summarize, diff12=posOpinionShare[1]-posOpinionShare[2])$diff12))
plot(density(ddply(record, ~runNumber, summarize, diff56=posOpinionShare[5]-posOpinionShare[6])$diff56))
setwd("~/git/mss/MSS/D150Out/smallSwingStupid/1481926279694/")
plot(density(ddply(record, ~runNumber, summarize, diff12=posOpinionShare[1]-posOpinionShare[2])$diff12))
plot(density(ddply(record, ~runNumber, summarize, diff12=posOpinionShare[1]-posOpinionShare[2])$diff12))
plot(density(ddply(record, ~runNumber, summarize, diff56=posOpinionShare[maxTs-1]-posOpinionShare[maxTs])$diff56))
maxTs = max(record$ts)
plot(density(ddply(record, ~runNumber, summarize, diff56=posOpinionShare[maxTs-1]-posOpinionShare[maxTs])$diff56))
# Load Data ---------------------------------------------------------------
rm(list=ls(all=TRUE))
setwd("~/git/mss/MSS/R")
library("ggplot2")
library("plyr")
library("RColorBrewer")
library("xtable")
source("defineBeamerPlot.R")
#Stupid Stupid
setwd("~/git/mss/MSS/D150Out/smallStupidStuipd/1481908670856/")
source("~/git/mss/MSS/R/generateStandardPlots.R")
StupidStupid = aggregated
StupidStupid$Game="StupidStupid"
#Swing Stupid
setwd("~/git/mss/MSS/D150Out/smallSwingStupid/1481926279694/")
source("~/git/mss/MSS/R/generateStandardPlots.R")
SwingStupid = aggregated
SwingStupid$Game="SwingStupid"
#Prom Stupid
setwd("~/git/mss/MSS/D150Out/smallPromStupid/1481955685931/")
source("~/git/mss/MSS/R/generateStandardPlots.R")
PromStupid = aggregated
PromStupid$Game="PromStupid"
setwd("~/git/mss/MSS/R/tables/")
# Merge -------------------------------------------------------------------
Merged=rbind(StupidStupid, SwingStupid, PromStupid)
# Table -------------------------------------------------------------------
#Identifiers
tabelIdentA = 0.7*100000+0.45*1000+c(0.25,0.5,0.75)*10
tabelIdentB = 0.7*100000+0.5*1000+c(0.25,0.5,0.75)*10
allIdent = c(tabelIdentA, tabelIdentB)
TableData = subset(Merged, (Merged$combinationIdentifier%in%allIdent))
TabelRduced = TableData[,c()]
rawTable = ddply(TableData, ~combinationIdentifier, summarise, p0=mean(p), pm=mean(s))
TabelDataSort = TableData[(order(TableData$combinationIdentifier)),]
#Means
rawTable$MeanStupid=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanStupid = TabelDataSort[(TabelDataSort$Game=="StupidStupid"),]$pEnd
rawTable$MeanSwing=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanSwing = TabelDataSort[(TabelDataSort$Game=="SwingStupid"),]$pEnd
rawTable$MeanProm=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanProm = TabelDataSort[(TabelDataSort$Game=="PromStupid"),]$pEnd
#SD
rawTable$SDStupid=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDStupid = TabelDataSort[(TabelDataSort$Game=="StupidStupid"),]$sdPEnd
rawTable$SDSwing=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDSwing = TabelDataSort[(TabelDataSort$Game=="SwingStupid"),]$sdPEnd
rawTable$SDProm=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDProm = TabelDataSort[(TabelDataSort$Game=="PromStupid"),]$sdPEnd
hlines=c(-1,0,3,6)
MeanTable = xtable(rawTable[,c(2:9)], caption="Mean result for proponents. Oponents play stupid. \\rot{10 runs per cell}", digits = 2)
align(MeanTable) <- "|lll|ccc|ccc"
print.xtable(x=MeanTable, hline.after = hlines, include.rownames = FALSE, vlines.after=vlines, caption.placement = "top")#, file = "meanTable.txt")
# Winner Plot -------------------------------------------------------------
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pWin)], p0=mean(p), pm=mean(s), MaxpWin = max(pWin), sd=sd(pWin), diff=max(pWin)-min(pWin))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Victories:", values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Protect", "StupidStupid"="Random", "PromStupid"="Convincible", "non"="Even"))+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
ggsave(file="WinnerPlot.pdf", width=16, height=10, dpi=100)
# Winner Plot -------------------------------------------------------------
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pWin)], p0=mean(p), pm=mean(s), MaxpWin = max(pWin), sd=sd(pWin), diff=max(pWin)-min(pWin))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Victories:", values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Protect", "StupidStupid"="Random", "PromStupid"="Convincible", "non"="Even"), drop=FALSE)+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
ggsave(file="WinnerPlot.pdf", width=16, height=10, dpi=100)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)), drop=FALSE)+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Victories:", values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Protect", "StupidStupid"="Random", "PromStupid"="Convincible", "non"="Even"), drop=FALSE)+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
ggsave(file="WinnerPlot.pdf", width=16, height=10, dpi=100)
# Winner Plot -------------------------------------------------------------
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pWin)], p0=mean(p), pm=mean(s), MaxpWin = max(pWin), sd=sd(pWin), diff=max(pWin)-min(pWin))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Victories:", values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Protect", "StupidStupid"="Random", "PromStupid"="Convincible", "non"="Even"), drop=TRUE)+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
ggsave(file="WinnerPlot.pdf", width=16, height=10, dpi=100)
Winner Plot -------------------------------------------------------------
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pWin)], p0=mean(p), pm=mean(s), MaxpWin = max(pWin), sd=sd(pWin), diff=max(pWin)-min(pWin))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Victories:", values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Protect", "StupidStupid"="Random", "PromStupid"="Convincible", "non"="Even"), drop=FALSE)+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
ggsave(file="WinnerPlot.pdf", width=16, height=10, dpi=100)
# Winner Plot -------------------------------------------------------------
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pWin)], p0=mean(p), pm=mean(s), MaxpWin = max(pWin), sd=sd(pWin), diff=max(pWin)-min(pWin))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Victories:", drop=FALSE, values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Protect", "StupidStupid"="Random", "PromStupid"="Convincible", "non"="Even"))+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
ggsave(file="WinnerPlot.pdf", width=16, height=10, dpi=100)
# Winner Plot -------------------------------------------------------------
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pWin)], p0=mean(p), pm=mean(s), MaxpWin = max(pWin), sd=sd(pWin), diff=max(pWin)-min(pWin))
Winner$winnerIs=ifelse(Winner$diff < 0.001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Victories:", drop=FALSE, values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Protect", "StupidStupid"="Random", "PromStupid"="Convincible", "non"="Even"))+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
ggsave(file="WinnerPlot.pdf", width=16, height=10, dpi=100)
# Winner Plot -------------------------------------------------------------
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pWin)], p0=mean(p), pm=mean(s), MaxpWin = max(pWin), sd=sd(pWin), diff=max(pWin)-min(pWin))
Winner$winnerIs=ifelse(Winner$diff < 0.01, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Victories:", drop=FALSE, values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Protect", "StupidStupid"="Random", "PromStupid"="Convincible", "non"="Even"))+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
ggsave(file="WinnerPlot.pdf", width=16, height=10, dpi=100)
# Winner Plot -------------------------------------------------------------
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pWin)], p0=mean(p), pm=mean(s), MaxpWin = max(pWin), sd=sd(pWin), diff=max(pWin)-min(pWin))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Victories:", drop=FALSE, values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Protect", "StupidStupid"="Random", "PromStupid"="Convincible", "non"="Even"))+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
ggsave(file="WinnerPlot.pdf", width=16, height=10, dpi=100)
# Table -------------------------------------------------------------------
#Identifiers
tabelIdentA = 0.7*100000+0.45*1000+c(0.25,0.5,0.75)*10
tabelIdentB = 0.7*100000+0.5*1000+c(0.25,0.5,0.75)*10
allIdent = c(tabelIdentA, tabelIdentB)
TableData = subset(Merged, (Merged$combinationIdentifier%in%allIdent))
TabelRduced = TableData[,c()]
rawTable = ddply(TableData, ~combinationIdentifier, summarise, p0=mean(p), pm=mean(s))
TabelDataSort = TableData[(order(TableData$combinationIdentifier)),]
#Means
rawTable$MeanStupid=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanStupid = TabelDataSort[(TabelDataSort$Game=="StupidStupid"),]$pEnd
rawTable$MeanSwing=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanSwing = TabelDataSort[(TabelDataSort$Game=="SwingStupid"),]$pEnd
rawTable$MeanProm=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanProm = TabelDataSort[(TabelDataSort$Game=="PromStupid"),]$pEnd
#SD
rawTable$SDStupid=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDStupid = TabelDataSort[(TabelDataSort$Game=="StupidStupid"),]$sdPEnd
rawTable$SDSwing=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDSwing = TabelDataSort[(TabelDataSort$Game=="SwingStupid"),]$sdPEnd
rawTable$SDProm=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDProm = TabelDataSort[(TabelDataSort$Game=="PromStupid"),]$sdPEnd
hlines=c(-1,0,3,6)
MeanTable = xtable(rawTable[,c(2:9)], caption="Mean result for proponents. Oponents play stupid. \\rot{10 runs per cell}", digits = 2)
align(MeanTable) <- "|lll|ccc|ccc"
print.xtable(x=MeanTable, hline.after = hlines, include.rownames = FALSE, vlines.after=vlines, caption.placement = "top")#, file = "meanTable.txt")
View(TableData)
View(MeanTable)
View(aggregated)
# Load Data ---------------------------------------------------------------
rm(list=ls(all=TRUE))
setwd("~/git/mss/MSS/R")
library("ggplot2")
library("plyr")
library("RColorBrewer")
library("xtable")
source("defineBeamerPlot.R")
#Stupid Stupid
setwd("~/git/mss/MSS/D150Out/smallStupidStuipd/1481908670856/")
source("~/git/mss/MSS/R/generateStandardPlots.R")
StupidStupid = aggregated
StupidStupid$Game="StupidStupid"
#Swing Stupid
setwd("~/git/mss/MSS/D150Out/smallSwingStupid/1481926279694/")
source("~/git/mss/MSS/R/generateStandardPlots.R")
SwingStupid = aggregated
SwingStupid$Game="SwingStupid"
#Prom Stupid
setwd("~/git/mss/MSS/D150Out/smallPromStupid/1481955685931/")
source("~/git/mss/MSS/R/generateStandardPlots.R")
PromStupid = aggregated
PromStupid$Game="PromStupid"
setwd("~/git/mss/MSS/R/tables/")
# Merge -------------------------------------------------------------------
Merged=rbind(StupidStupid, SwingStupid, PromStupid)
# Table -------------------------------------------------------------------
#Identifiers
tabelIdentA = 0.7*100000+0.46*1000+c(0.25,0.5,0.75)*10
tabelIdentB = 0.7*100000+0.48*1000+c(0.25,0.5,0.75)*10
tabelIdentC = 0.7*100000+0.5*1000+c(0.25,0.5,0.75)*10
allIdent = c(tabelIdentA, tabelIdentB, tabelIdentC)
TableData = subset(Merged, (Merged$combinationIdentifier%in%allIdent))
TabelRduced = TableData[,c()]
rawTable = ddply(TableData, ~combinationIdentifier, summarise, p0=mean(p), pm=mean(s))
TabelDataSort = TableData[(order(TableData$combinationIdentifier)),]
#Means
rawTable$MeanRandom=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanRandom = TabelDataSort[(TabelDataSort$Game=="StupidStupid"),]$pEnd
rawTable$MeanProtect=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanProtect = TabelDataSort[(TabelDataSort$Game=="SwingStupid"),]$pEnd
rawTable$MeanConvincible=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanConvincible = TabelDataSort[(TabelDataSort$Game=="PromStupid"),]$pEnd
#SD
rawTable$SDRandom=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDRandom = TabelDataSort[(TabelDataSort$Game=="StupidStupid"),]$sdPEnd
rawTable$SDProtect=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDProtect = TabelDataSort[(TabelDataSort$Game=="SwingStupid"),]$sdPEnd
rawTable$SDConvincible=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDConvincible = TabelDataSort[(TabelDataSort$Game=="PromStupid"),]$sdPEnd
hlines=c(-1,0,3,6)
MeanTable = xtable(rawTable[,c(2:9)], caption="Mean result for proponents. Oponents play stupid. \\rot{10 runs per cell}", digits = 2)
align(MeanTable) <- "|lll|ccc|ccc"
print.xtable(x=MeanTable, hline.after = hlines, include.rownames = FALSE, vlines.after=vlines, caption.placement = "top")#, file = "meanTable.txt")
# Winner Plot -------------------------------------------------------------
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pWin)], p0=mean(p), pm=mean(s), MaxpWin = max(pWin), sd=sd(pWin), diff=max(pWin)-min(pWin))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Victories:", drop=FALSE, values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Protect", "StupidStupid"="Random", "PromStupid"="Convincible", "non"="Even"))+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
ggsave(file="WinnerPlot.pdf", width=16, height=10, dpi=100)
hlines=c(-1,0,3,6,9)
MeanTable = xtable(rawTable[,c(2:9)], caption="Mean result for proponents. Oponents play stupid. \\rot{10 runs per cell}", digits = 2)
align(MeanTable) <- "|lll|ccc|ccc"
print.xtable(x=MeanTable, hline.after = hlines, include.rownames = FALSE, vlines.after=vlines, caption.placement = "top")#, file = "meanTable.txt")
hlines=c(-1,0,3,6,9)
MeanTable = xtable(rawTable[,c(2:9)], caption="Mean result for proponents. Oponents play stupid. \\rot{10 runs per cell}", digits = 2)
align(MeanTable) <- "|l|ll|ccc|ccc"
print.xtable(x=MeanTable, hline.after = hlines, include.rownames = FALSE, vlines.after=vlines, caption.placement = "top")#, file = "meanTable.txt")
hlines=c(-1,0,3,6,9)
MeanTable = xtable(rawTable[,c(2:9)], caption="Mean result for proponents. Oponents play stupid. \\rot{10 runs per cell}", digits = 2)
align(MeanTable) <- "|l|l|l|ccc|ccc"
print.xtable(x=MeanTable, hline.after = hlines, include.rownames = FALSE, vlines.after=vlines, caption.placement = "top")#, file = "meanTable.txt")
View(TableData)
TableData[(TableData$Game=="Swing"),]
TableData[(TableData$Game=="SwingStupd"),]
TableData[(TableData$Game=="SwingStupid"),]
TableData[(TableData$Game=="SwingStupid" && TableData$p==0.46),]
TableData[(TableData$Game=="SwingStupid" && TableData$p=="0.46"),]
TableData[(TableData$Game=="SwingStupid" & TableData$p=="0.46"),]
# Load Data ---------------------------------------------------------------
rm(list=ls(all=TRUE))
setwd("~/git/mss/MSS/R")
library("ggplot2")
library("plyr")
library("RColorBrewer")
library("xtable")
source("defineBeamerPlot.R")
#Stupid Stupid
setwd("~/git/mss/MSS/D150Out/smallStupidStuipd/1481908670856/")
source("~/git/mss/MSS/R/generateStandardPlots.R")
StupidStupid = aggregated
StupidStupid$Game="StupidStupid"
#Swing Stupid
setwd("~/git/mss/MSS/D150Out/smallSwingStupid/1481926279694/")
source("~/git/mss/MSS/R/generateStandardPlots.R")
SwingStupid = aggregated
SwingStupid$Game="SwingStupid"
#Prom Stupid
setwd("~/git/mss/MSS/D150Out/smallPromStupid/1481955685931/")
source("~/git/mss/MSS/R/generateStandardPlots.R")
PromStupid = aggregated
PromStupid$Game="PromStupid"
setwd("~/git/mss/MSS/R/tables/")
# Merge -------------------------------------------------------------------
Merged=rbind(StupidStupid, SwingStupid, PromStupid)
# Table -------------------------------------------------------------------
#Identifiers
tabelIdentA = 0.7*100000+0.46*1000+c(0.25,0.5,0.75)*10
tabelIdentB = 0.7*100000+0.48*1000+c(0.25,0.5,0.75)*10
tabelIdentC = 0.7*100000+0.5*1000+c(0.25,0.5,0.75)*10
allIdent = c(tabelIdentA, tabelIdentB, tabelIdentC)
TableData = subset(Merged, (Merged$combinationIdentifier%in%allIdent))
TabelRduced = TableData[,c()]
rawTable = ddply(TableData, ~combinationIdentifier, summarise, p0=mean(p), pm=mean(s))
TabelDataSort = TableData[(order(TableData$combinationIdentifier)),]
#Means
rawTable$MeanRandom=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanRandom = TabelDataSort[(TabelDataSort$Game=="StupidStupid"),]$pEnd
rawTable$MeanProtect=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanProtect = TabelDataSort[(TabelDataSort$Game=="SwingStupid"),]$pEnd
rawTable$MeanConvincible=0
rawTable[(order(rawTable$combinationIdentifier)),]$MeanConvincible = TabelDataSort[(TabelDataSort$Game=="PromStupid"),]$pEnd
#SD
rawTable$SDRandom=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDRandom = TabelDataSort[(TabelDataSort$Game=="StupidStupid"),]$sdPEnd
rawTable$SDProtect=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDProtect = TabelDataSort[(TabelDataSort$Game=="SwingStupid"),]$sdPEnd
rawTable$SDConvincible=0
rawTable[(order(rawTable$combinationIdentifier)),]$SDConvincible = TabelDataSort[(TabelDataSort$Game=="PromStupid"),]$sdPEnd
hlines=c(-1,0,3,6,9)
MeanTable = xtable(rawTable[,c(2:9)], caption="Mean result for proponents. Oponents play stupid. \\rot{10 runs per cell}", digits = 2)
align(MeanTable) <- "|l|l|l|ccc|ccc"
print.xtable(x=MeanTable, hline.after = hlines, include.rownames = FALSE, vlines.after=vlines, caption.placement = "top")#, file = "meanTable.txt")
# Winner Plot -------------------------------------------------------------
Winner = ddply(Merged, ~combinationIdentifier, summarize, winnerIs=Game[which.max(pWin)], p0=mean(p), pm=mean(s), MaxpWin = max(pWin), sd=sd(pWin), diff=max(pWin)-min(pWin))
Winner$winnerIs=ifelse(Winner$diff < 0.0001, "non", Winner$winnerIs)
ggplot(Winner, aes(x=p0, y=pm))+
geom_tile(aes(fill=as.factor(winnerIs)))+
#scale_fill_discrete(name=expression(p[final]))+
scale_fill_manual(name="Most Victories:", drop=FALSE, values=c("SwingStupid"="red", "StupidStupid"="darkgreen", "PromStupid"="yellow", "non"="gray"),
labels=c("SwingStupid"="Protect", "StupidStupid"="Random", "PromStupid"="Convincible", "non"="Even"))+
beamerPlot+
xlab(expression(p[0]))+
ylab(expression(p[M]))
ggsave(file="WinnerPlot.pdf", width=16, height=10, dpi=100)
